// Reverse array

// #include<iostream>
// using namespace std;
// void reverse(int arr[],int size){
//     int start=0,end=size-1;
//     while(start<end){
//         int temp=arr[start];
//         arr[start]=arr[end];
//         arr[end]=temp;
//         start++;
//         end--;
//     }
// }
// int main(){
//     int n;
//     cout<<"Enter the size of the array:";
//     cin>>n;
//     int arr[n];
//     cout<<"Enter the element of the array:";
//     for(int i=0;i<n;i++){
//         cin>>arr[i];
//     }
    
//     reverse(arr,n);
//     cout<<"Reversed array is:";
//     for(int i=0;i<n;i++){
//         cout<<arr[i]<<" ";
//     }
//     return 0;
// }

// Minimum And Maximum Element

#include<iostream>
using namespace std;

int maximum(int arr[],int size){
    int max=arr[0];
    for (int i = 0; i < size; i++)
    {
        if(max<arr[i])
            max=arr[i];
    } 
    return max;
}

int minimum(int arr[],int size){
    int min=arr[0];
    for (int i = 0; i < size; i++)
    {
        if(min>arr[i])
            min=arr[i];
    } 
    return min;
}

int main(){
    int n;
    cout<<"Enter the size of the array:";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of the array:";
    for (int i = 0; i < n; i++)
    {
        cin>>arr[i];
    }
    cout<<"Maximum value is:"<<maximum(arr,n)<<endl;
    cout<<"Minimum value is:"<<minimum(arr,n)<<endl;
    return 0;
}

// Kth smallest number in an array

//{ Driver Code Starts
//Initial function template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        //code here
        sort(arr,arr+r+1);
        return arr[k-1];
    }
};

//{ Driver Code Starts.

int main()
{
    int test_case;
    cin>>test_case;
    while(test_case--)
    {
        int number_of_elements;
        cin>>number_of_elements;
        int a[number_of_elements];
        
        for(int i=0;i<number_of_elements;i++)
            cin>>a[i];
            
        int k;
        cin>>k;
        Solution ob;
        cout<<ob.kthSmallest(a, 0, number_of_elements-1, k)<<endl;
    }
    return 0;
}
// } Driver Code Ends

// Kth largest element

//{ Driver Code Starts
//Initial function template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        //code here
        sort(arr,arr+r+1);
        return arr[r+1-k];
    }
};

//{ Driver Code Starts.
 
int main()
{
    int test_case;
    cin>>test_case;
    while(test_case--)
    {
        int number_of_elements;
        cin>>number_of_elements;
        int a[number_of_elements];
        
        for(int i=0;i<number_of_elements;i++)
            cin>>a[i];
            
        int k;
        cin>>k;
        Solution ob;
        cout<<ob.kthSmallest(a, 0, number_of_elements-1, k)<<endl;
    }
    return 0;
}
// } Driver Code Ends

// Sort 0s,1s and 2s

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    void swap(int &x,int &y){
        int temp=x;
        x=y;
        y=temp;
    }
    void sort012(int arr[], int n)
    {
    int a0=0,b1=0,c2=n-1;
    while(b1<=c2){
        if(arr[b1]==0){
            swap(arr[b1],arr[a0]);
            a0++;
            b1++;
        }
        else if(arr[b1]==1){
            b1++;
        }
        else{
            swap(arr[b1],arr[c2]);
            c2--;
        }
    }
    
}
};

//{ Driver Code Starts.
int main() {

    int t;
    cin >> t;

    while(t--){
        int n;
        cin >>n;
        int a[n];
        for(int i=0;i<n;i++){
            cin >> a[i];
        }

        Solution ob;
        ob.sort012(a, n);

        for(int i=0;i<n;i++){
            cout << a[i]  << " ";
        }

        cout << endl;
        
        
    }
    return 0;
}


// } Driver Code Ends

//Move all negative numbers of the array to one side

/#include <iostream>
using namespace std;
// Function to shift all the negative elements on left side
void shiftall(int arr[], int left,int right)
{
    // Loop to iterate over the array from left to the right
    while (left <= right)
    {
        // Condition to check if the left element is negative
        if (arr[left] < 0 )
            left++;
        // Condition to check if the left pointer element is positive and the right pointer element is negative
        else if (arr[left] > 0 && arr[right] < 0)
        {
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
            left++;
            right--;
        }
        // Condition to check if right element are positive
        else if (arr[right] > 0)
            right--;
        else
        {
            left++;
            right--;
        }
    }
}
// Function to print the array
void display(int arr[], int right)
{
    // Loop to iterate over the element of the given array
    for (int i = 0; i < right; ++i)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main()
{
    int n;
    cin>>n;
    int arr[n] ;
    for (int i = 0; i < n; i++)
    {
        cin>>arr[i];
    }
    // Function Call
    shiftall(arr, 0, n-1);
    display(arr, n);
    return 0;
}

// Union of two sorted arrays

class Solution{
    public:
    //Function to return the count of number of elements in union of two arrays.
    int doUnion(int a[], int n, int b[], int m)  {
        set<int> st;
        for(int i=0;i<n;i++){
            st.insert(a[i]);
        }
        for(int i=0;i<m;i++){
            st.insert(b[i]);
        }
        return st.size();
    }
};

// Cyclically Rotate an Array by one

void reverse(int arr[],int start,int end){
    for(int i=start,j=end;i<j;i++,j--){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
}

void rotate(int arr[], int n)
{
    reverse(arr,0,n-1);
    reverse(arr,0,0);
    reverse(arr,1,n-1);
}

// Largest Sum Contiguous Subarray(Kadane's Algorithm)

class Solution{
    public:
    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long long maxSubarraySum(int arr[], int n){
        
        int sum=0;
        int maximum=arr[0];
        for(int i=0;i<n;i++){
            sum+=arr[i];
            maximum=max(maximum,sum);
            if(sum<0){
                sum=0;
            }
        }
        return maximum;
    }
};

// Minimize the Heights II

class Solution {
  public:
    int getMinDiff(int arr[], int n, int k) {
        sort(arr,arr+n);
        int ans=arr[n-1]-arr[0];
        int smallest=arr[0]+k;
        int largest=arr[n-1]-k;
        int minimum,maximum;
        for(int i=0;i<n-1;i++){
            minimum=min(smallest,arr[i+1]-k);
            maximum=max(largest,arr[i]+k);
            if(minimum<0){
                continue;
            }
            ans=min(ans,maximum-minimum);
        }
        return ans;
    }
};

// Minimum number of jumps

class Solution{
  public:
    int minJumps(int arr[], int n){
        int jump=0;
        int position=0;
        int destination=0;
        for(int i=0;i<n-1;i++){
            destination=max(destination,arr[i]+i);
            if(position==i){
                position=destination;
                jump++;
            }
        }
        if(position>=n-1){
            return jump;
        }
        else{
            return -1;
        }
    }
};

// Find Duplicate number

class Solution{
    public:
        int findDuplicate(vector<int>& nums){
            int slow=nums[0];
            int fast=nums[0];
            do{
                slow=nums[slow];
                fast=nums[nums[fast]];
            }while(slow!=fast);
            
            fast=nums[0];
            while(slow!=fast){
                slow=nums[slow];
                fast=nums[fast];
            }
            return slow;
       }
};

// Merge two sorted arrays without using extra space

class Solution{
    public:
        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            int i = 0, j = 0, k = n - 1;
            while (i <= k && j < m) {
                if (arr1[i] < arr2[j])
                    i++;
                else {
                    swap(arr2[j++], arr1[k--]);
                }
            }

            sort(arr1, arr1 + n);
            sort(arr2, arr2 + m);
        } 
};
